#############################################################################
# MESS main makefile														#
#																			#
# MESS build commands:														#
#																			#
#	Command							Executable		Optimization			#
#	------------------------------	--------------	------------			#
#	make -f makefile.mes			mess.exe		Pentium					#
#	make -f makefile.mes DEBUG=1	messd.exe		N/A						#
#	make -f makefile.mes ATHLON=1	messat.exe		Athlon					#
#	make -f makefile.mes K6=1		messk6.exe		K6						#
#	make -f makefile.mes P4=1		messp4.exe		Pentium 4				#
#############################################################################


# set this to mame, mess or the destination you want to build
# TARGET = mess
# example for a tiny compile
# TARGET = tinyms
ifeq ($(TARGET),)
TARGET = mess
endif

# uncomment next line to include the debugger
# DEBUG = 1

# uncomment next line to include the symbols for symify
# SYMBOLS = 1

# uncomment next line to generate a link map for exception handling in windows
# MAP = 1

# uncomment next line to use Assembler 68000 engine
# X86_ASM_68000 = 1

# uncomment next line to use Assembler 68020 engine
# X86_ASM_68020 = 1

# uncomment next line to use DRC MIPS3 engine
X86_MIPS3_DRC = 1

# uncomment next line to use cygwin compiler
# COMPILESYSTEM_CYGWIN	= 1

# uncomment next line to build expat as part of MAME build
BUILD_EXPAT = 1

# uncomment next line to build zlib as part of MAME build
BUILD_ZLIB = 1


# set this the operating system you're building for
# MAMEOS = msdos
# MAMEOS = windows
ifeq ($(MAMEOS),)
MAMEOS = windows
endif

# extension for executables
EXE = .exe

# CPU core include paths
VPATH=src $(wildcard src/cpu/*)

# compiler, linker and utilities
AR = @ar
CC = @gcc
LD = @gcc
ASM = @nasm
DASM = @gcc -S
HHC = @-hhc
ASMFLAGS = -f coff
MD = -mkdir
RM = @rm -f
#PERL = @perl -w

WINDOWS_PROGRAM = -mwindows
CONSOLE_PROGRAM = -mconsole

SUFFIX =
WINUI = 1

ifeq ($(MAMEOS),msdos)
PREFIX = d
else
PREFIX =
endif

ifdef DEBUG
NAME = $(PREFIX)$(TARGET)$(SUFFIX)d
GUINAME = $(TARGET)gui$(SUFFIX)d
else
ifdef ATHLON
NAME = $(PREFIX)$(TARGET)$(SUFFIX)at
GUINAME = $(TARGET)gui$(SUFFIX)at
ARCH = -march=athlon
else
ifdef K6
NAME = $(PREFIX)$(TARGET)$(SUFFIX)k6
GUINAME = $(TARGET)gui$(SUFFIX)k6
ARCH = -march=k6
else
ifdef I686
NAME = $(PREFIX)$(TARGET)$(SUFFIX)pp
GUINAME = $(TARGET)gui$(SUFFIX)pp
ARCH = -march=pentiumpro
else
ifdef P4
NAME = $(PREFIX)$(TARGET)$(SUFFIX)p4
GUINAME = $(TARGET)gui$(SUFFIX)p4
ARCH = -march=pentium4
else
NAME = $(PREFIX)$(TARGET)$(SUFFIX)
GUINAME = $(TARGET)gui$(SUFFIX)
ARCH = -march=pentium
endif
endif
endif
endif
endif

# build the targets in different object dirs, since mess changes
# some structures and thus they can't be linked against each other.
OBJ = obj/$(NAME)

EMULATORCLI = $(NAME)$(EXE)
EMULATOR    = $(EMULATORCLI)

DEFS = -DX86_ASM -DLSB_FIRST -DINLINE="static __inline__" -Dasm=__asm__ -DCRLF=3

ifeq ($(MAMEOS),windows)

DEFS += -DWIN32 -DWINNT -D_WIN32_WINNT=0x0400 -DMAME32NAME='"MESS"' -DMAMENAME='"MESS"'
EMULATORDLL = $(NAME)lib.dll
EMULATORGUI = $(GUINAME)$(EXE)
EMULATORALL = $(EMULATORDLL) $(EMULATORCLI) $(EMULATORGUI)
MESSTEST = messtest.exe
MESSDOCS = messdocs.exe

else

EMULATORALL = $(EMULATORCLI)

endif

CFLAGS_BASE = -std=gnu99 -Dalloca=__builtin_alloca -Imess -Imess/$(MAMEOS) \
	-Isrc -Isrc/includes -Isrc/expat -Isrc/$(MAMEOS) -I$(OBJ)/cpu/m68000 -Isrc/cpu/m68000 -Isrc/xml2info

ifdef SYMBOLS
CFLAGS += -O0 -Werror -Wall -Wno-unused -g
else
CFLAGS += -DNDEBUG \
	$(ARCH) -O3 -fomit-frame-pointer -fstrict-aliasing \
	-Werror -Wall -Wno-sign-compare -Wunused \
	-Wpointer-arith -Wbad-function-cast -Wcast-align \
	-Wstrict-prototypes -Wundef \
	-Wformat-security -Wwrite-strings \
	-Wdisabled-optimization \
#	-Wredundant-decls
#	-Wfloat-equal
#	-Wunreachable-code -Wpadded
#	-W had to remove because of the "missing initializer" warning
#	-Wlarger-than-262144  \
#	-Wcast-qual \
#	-Wwrite-strings \
#	-Wconversion \
#	-Wmissing-prototypes \
#	-Wmissing-declarations
endif

CFLAGS = $(CFLAGS_BASE) $(CFLAGS_WARNINGS)

# the windows osd code at least cannot be compiled with -pedantic
CFLAGSPEDANTIC = $(CFLAGS) -pedantic

ifdef SYMBOLS
LDFLAGS =
else
#LDFLAGS = -Wl,--warn-common
LDFLAGS = -s
endif

ifdef MAP
MAPFLAGS = -Wl,-M >$(NAME).map
else
MAPFLAGS =
endif

# platform .mak files will want to add to this
LIBS = -lz

OBJDIRS = obj $(OBJ) $(OBJ)/cpu $(OBJ)/sound $(OBJ)/$(MAMEOS) \
	$(OBJ)/drivers $(OBJ)/machine $(OBJ)/vidhrdw $(OBJ)/sndhrdw $(OBJ)/xml2info

OBJDIRS += 	$(OBJ)/mess         $(OBJ)/mess/$(MAMEOS)			\
		$(OBJ)/mess/expat										\
		$(OBJ)/mess/cpu		$(OBJ)/mess/devices					\
		$(OBJ)/mess/systems $(OBJ)/mess/machine					\
		$(OBJ)/mess/vidhrdw $(OBJ)/mess/sndhrdw					\
		$(OBJ)/mess/formats $(OBJ)/mess/tools					\
		$(OBJ)/mess/tools/dat2html $(OBJ)/mess/tools/mkhdimg	\
		$(OBJ)/mess/tools/messroms $(OBJ)/mess/tools/imgtool	\
		$(OBJ)/mess/tools/messdocs $(OBJ)/mess/tools/messtest	\
		$(OBJ)/mess/tools/mkimage  $(OBJ)/mess/sound			\
		$(OBJ)/ui $(OBJ)/mess/ui

ifeq ($(MAMEOS),windows)
PLATFORM_TOOL_OBJS =				\
	$(OBJ)/mess/windows/glob.o		\
	$(OBJ)/mess/windows/dirutils.o	\
	$(OBJ)/windows/fileio.o
else
PLATFORM_TOOL_OBJS = $(OBJ)/$(MAMEOS)/fileio.o
endif


ifdef BUILD_EXPAT
OBJDIRS += $(OBJ)/expat
EXPAT = $(OBJ)/libexpat.a
else
LIBS += -lexpat
EXPAT =
endif

ifdef BUILD_ZLIB
OBJDIRS += $(OBJ)/zlib
ZLIB = $(OBJ)/libz.a
else
LIBS += -lz
ZLIB =
endif

all:	maketree $(EMULATORCLI) $(EMULATORGUI) $(MESSTEST) $(MESSDOCS) chdman.exe imgtool.exe

# include the various .mak files
include src/core.mak
include mess/$(TARGET).mak
include src/rules.mak
include src/$(MAMEOS)/$(MAMEOS).mak
include mess/rules_ms.mak

ifdef DEBUG
DBGDEFS = -DMAME_DEBUG
else
DBGDEFS =
DBGOBJS =
endif

ifdef COMPILESYSTEM_CYGWIN
CFLAGS	+= -mno-cygwin
LDFLAGS	+= -mno-cygwin
endif

# combine the various definitions to one
CDEFS = $(DEFS) $(COREDEFS) $(CPUDEFS) $(SOUNDDEFS) $(ASMDEFS) $(DBGDEFS)

ifeq ($(MAMEOS),windows)

# primary target
$(EMULATORDLL): $(OBJS) $(COREOBJS) $(OSOBJS) $(DRVLIBS) $(RESFILE)
# always recompile the version string
	$(CC) $(CDEFS) $(CFLAGS) -c src/version.c -o $(OBJ)/version.o
	@echo Linking $@...
	@dllwrap --image-base=0x10080000 --output-lib=lib$(NAME).a --dllname=$@ --driver-name=gcc $(LDFLAGS) $(OBJS) $(COREOBJS) $(OSOBJS) $(LIBS) $(DRVLIBS) $(RESFILE)

# gui target
$(EMULATORGUI):	$(EMULATORDLL) $(OBJ)/mess/ui/guimain.o $(GUIRESFILE)
	@echo Linking $@...
	$(LD) $(LDFLAGS) $(WINDOWS_PROGRAM) $^ -o $@

# cli target
$(EMULATORCLI):	$(EMULATORDLL) $(OBJ)/mess/windows/climain.o
	@echo Linking $@...
	$(LD) $(LDFLAGS) $(CONSOLE_PROGRAM) $^ -o $@

else

$(EMULATORCLI):	$(OBJS) $(COREOBJS) $(OSOBJS) $(DRVLIBS) $(LIBS)
	$(CC) $(CDEFS) $(CFLAGS) -c src/version.c -o $(OBJ)/version.o
	@echo Linking $@...
	$(LD) $(LDFLAGS) $(CONSOLE_PROGRAM) $^ -o $@

endif



#############################################################################

romcmp$(EXE): $(OBJ)/romcmp.o $(OBJ)/unzip.o
	@echo Linking $@...
	$(LD) $(LDFLAGS) $^ -lz -o $@

chdman$(EXE): $(OBJ)/chdman.o $(OBJ)/chd.o $(OBJ)/chdcd.o $(OBJ)/md5.o $(OBJ)/sha1.o $(OBJ)/version.o
	@echo Linking $@...
	$(LD) $(LDFLAGS) $^ -lz -o $@

xml2info$(EXE): $(OBJ)/xml2info.o $(OBJ)/libexpat.a
	@echo Linking $@...
	$(CC) -O1 -o xml2info$(EXE) $^ -Xlinker $(OBJ)/libexpat.a

dat2html$(EXE): $(DAT2HTML_OBJS)
	@echo Compiling $@...
	$(LD) $(LDFLAGS) $^ -o $@

messdocs$(EXE): $(MESSDOCS_OBJS) $(OBJ)/mess/windows/dirutils.o
	@echo Compiling $@...
	$(LD) $(LDFLAGS) $^ -o $@

imgtool$(EXE): $(IMGTOOL_OBJS) $(PLATFORM_TOOL_OBJS)
	@echo Compiling $@...
	$(LD) $(LDFLAGS) $^ -lz -o $@

messtest$(EXE):	$(OBJS) $(COREOBJS) $(DRVLIBS) $(MESSTEST_OBJS) \
		$(OBJ)/windows/asmtile.o				\
		$(OBJ)/windows/ticker.o					\
		$(OBJ)/windows/fileio.o					\
		$(OBJ)/windows/rc.o						\
		$(OBJ)/windows/misc.o					\
		$(OBJ)/windows/winalloc.o				\
		$(OBJ)/mess/windows/dirio.o				\
		$(OBJ)/mess/windows/dirutils.o			\
		$(OBJ)/mess/windows/glob.o				\
		$(OBJ)/mess/windows/parallel.o
	@echo Linking $@...
	$(LD) $(LDFLAGS) $(CONSOLE_PROGRAM) $^ -Wl,--allow-multiple-definition -lz -lwinmm -o $@

# secondary libraries
$(OBJ)/libexpat.a: $(OBJ)/expat/xmlparse.o $(OBJ)/expat/xmlrole.o $(OBJ)/expat/xmltok.o
	$(AR) cr $@ $^

$(OBJ)/libz.a: $(OBJ)/zlib/adler32.o $(OBJ)/zlib/compress.o $(OBJ)/zlib/crc32.o $(OBJ)/zlib/deflate.o \
				$(OBJ)/zlib/gzio.o $(OBJ)/zlib/inffast.o $(OBJ)/zlib/inflate.o \
				$(OBJ)/zlib/infback.o $(OBJ)/zlib/inftrees.o $(OBJ)/zlib/trees.o \
				$(OBJ)/zlib/uncompr.o $(OBJ)/zlib/zutil.o
	$(AR) cr $@ $^

#############################################################################

# for Windows at least, we can't compile OS-specific code with -pedantic
$(OBJ)/$(MAMEOS)/%.o: src/$(MAMEOS)/%.c
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGS) -c $< -o $@
ifdef DISASSEMBLY
	$(DASM) $(CDEFS) $(CFLAGSPEDANTIC) $< -o $(@:%.o=%.S)
endif

$(OBJ)/mess/$(MAMEOS)/%.o: mess/$(MAMEOS)/%.c
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGS) -c $< -o $@
ifdef DISASSEMBLY
	$(DASM) $(CDEFS) $(CFLAGSPEDANTIC) $< -o $(@:%.o=%.S)
endif

$(OBJ)/xml2info/%.o: src/xml2info/%.c
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGS_BASE) -c $< -o $@
ifdef DISASSEMBLY
	$(DASM) $(CDEFS) $(CFLAGS_BASE) $< -o $(@:%.o=%.S)
endif

$(OBJ)/mess/tools/messdocs/%.o: mess/tools/messdocs/%.c
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGS_BASE) -c $< -o $@
ifdef DISASSEMBLY
	$(DASM) $(CDEFS) $(CFLAGS_BASE) $< -o $(@:%.o=%.S)
endif

$(OBJ)/mess/tools/messtest/%.o: mess/tools/messtest/%.c
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGS_BASE) -c $< -o $@
ifdef DISASSEMBLY
	$(DASM) $(CDEFS) $(CFLAGS_BASE) $< -o $(@:%.o=%.S)
endif

$(OBJ)/%.o: src/%.c
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGSPEDANTIC) -c $< -o $@
ifdef DISASSEMBLY
	$(DASM) $(CDEFS) $(CFLAGSPEDANTIC) $< -o $(@:%.o=%.S)
endif

$(OBJ)/mess/%.o: mess/%.c
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGSPEDANTIC) -c $< -o $@
ifdef DISASSEMBLY
	$(DASM) $(CDEFS) $(CFLAGSPEDANTIC) $< -o $(@:%.o=%.S)
endif

# compile generated C files for the 68000 emulator
$(M68000_GENERATED_OBJS): $(OBJ)/cpu/m68000/m68kmake$(EXE)
	@echo Compiling $(subst .o,.c,$@)...
	$(CC) $(CDEFS) $(CFLAGSPEDANTIC) -c $*.c -o $@
ifdef DISASSEMBLY
	$(DASM) $(CDEFS) $(CFLAGSPEDANTIC) $< -o $(@:%.o=%.S)
endif

# additional rule, because m68kcpu.c includes the generated m68kops.h :-/
$(OBJ)/cpu/m68000/m68kcpu.o: $(OBJ)/cpu/m68000/m68kmake$(EXE)

# generate C source files for the 68000 emulator
$(OBJ)/cpu/m68000/m68kmake$(EXE): src/cpu/m68000/m68kmake.c
	@echo M68K make $<...
	$(CC) $(CDEFS) $(CFLAGSPEDANTIC) -DDOS -o $(OBJ)/cpu/m68000/m68kmake$(EXE) $<
	@echo Generating M68K source files...
	$(OBJ)/cpu/m68000/m68kmake$(EXE) $(OBJ)/cpu/m68000 src/cpu/m68000/m68k_in.c

# generate asm source files for the 68000/68020 emulators
$(OBJ)/cpu/m68000/68000.asm:  src/cpu/m68000/make68k.c
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGSPEDANTIC) -O0 -DDOS -o $(OBJ)/cpu/m68000/make68k$(EXE) $<
	@echo Generating $@...
	@$(OBJ)/cpu/m68000/make68k$(EXE) $@ $(OBJ)/cpu/m68000/68000tab.asm 00

$(OBJ)/cpu/m68000/68020.asm:  src/cpu/m68000/make68k.c
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGSPEDANTIC) -O0 -DDOS -o $(OBJ)/cpu/m68000/make68k$(EXE) $<
	@echo Generating $@...
	@$(OBJ)/cpu/m68000/make68k$(EXE) $@ $(OBJ)/cpu/m68000/68020tab.asm 20

# generated asm files for the 68000 emulator
$(OBJ)/cpu/m68000/68000.o:  $(OBJ)/cpu/m68000/68000.asm
	@echo Assembling $<...
	$(ASM) -o $@ $(ASMFLAGS) $(subst -D,-d,$(ASMDEFS)) $<

$(OBJ)/cpu/m68000/68020.o:  $(OBJ)/cpu/m68000/68020.asm
	@echo Assembling $<...
	$(ASM) -o $@ $(ASMFLAGS) $(subst -D,-d,$(ASMDEFS)) $<

$(OBJ)/%.a:
	@echo Archiving $@...
	$(RM) $@
	$(AR) cr $@ $^

mess.chm:	messdocs.exe
	messdocs.exe docs/wintoc.xml obj/help
	$(HHC) obj\\help\\mess.hhp
	@cp obj/help/mess.chm $@
	
makedir:
	@echo make makedir is no longer necessary, just type make

$(sort $(OBJDIRS)):
	$(MD) $@

maketree: $(sort $(OBJDIRS))

clean: cleantools cleantexts
	@echo Deleting object tree $(OBJ)...
	$(RM) -r $(OBJ) lib$(NAME).a
	@echo Deleting $(EMULATORALL)...
	$(RM) $(EMULATORALL)
	@echo Deleting Map file...
	$(RM) $(NAME).map
	
cleantools:
	@echo Cleaning Tools
	$(RM) $(TOOLS)

cleantexts:
	@echo Cleaning Text Files
	$(RM) $(TEXTS)
	@echo Removing Sysinfo directory contents
	$(RM) -r sysinfo
	
clean68k:
	@echo Deleting 68k files...
	$(RM) -r $(OBJ)/cpuintrf.o
	$(RM) -r $(OBJ)/drivers/cps2.o
	$(RM) -r $(OBJ)/cpu/m68000	

tests:	messtest.exe
	messtest.exe mess/tools/messtest/tests.xml

