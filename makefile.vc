#############################################################################
# MESS Visual C++ makefile                                                  #
#																			#
# MESS build commands:														#
#																			#
#	Command							Executable		Optimization			#
#	------------------------------	--------------	------------			#
#	make -f makefile.vc				messvc.exe		Pentium					#
#	make -f makefile.vc DEBUG=1		messvcd.exe		N/A						#
#############################################################################


# set this to mame, mess or the destination you want to build
# TARGET = mame
TARGET = mess
# TARGET = neomame
# TARGET = tiny
# TARGET=tinyms

# build with browser information for debugging
BSCMAKE = @-bscmake.exe

# uncomment next line to include the debugger
# DEBUG = 1

# uncomment next line to use the new multiwindow debugger
NEW_DEBUGGER = 1

# uncomment next line to use Assembler 68000 engine
# X86_ASM_68000 = 1

# uncomment next line to use Assembler 68020 engine
# X86_ASM_68020 = 1

# uncomment next line to use DRC MIPS3 engine
# X86_MIPS3_DRC = 1

# uncomment next line to use DRC PowerPC engine
# X86_PPC_DRC = 1

# uncomment next line to use cygwin compiler
# COMPILESYSTEM_CYGWIN	= 1

# uncomment next line to build expat as part of MAME build
BUILD_EXPAT = 1

# uncomment next line to build zlib as part of MAME build
BUILD_ZLIB = 1


# set this the operating system you're building for
MAMEOS = windows

# uncomment next line to generate help files
# HELP = 1


# extension for executables
EXE = .exe

# CPU core include paths
VPATH=src $(wildcard src/cpu/*)

# compiler, linker and utilities
AR = @lib
CC = @cl
LD = @link
RC = rc
ASM = @nasmw
ASMFLAGS = -f win32
RM = rm
RMDIR = rd /S /Q
MD = -mkdir

ifeq "$(TARGET)" "mess"
MESS = 1
endif
ifeq "$(TARGET)" "tinyms"
MESS = 1
endif

MSVC = 1
WINDOWS_PROGRAM = -subsystem:windows
CONSOLE_PROGRAM = -subsystem:console

SUFFIX = vc
WINUI = 1

ifdef DEBUG
NAME = $(TARGET)$(SUFFIX)d
GUINAME = $(TARGET)gui$(SUFFIX)d
else
ifdef K6
NAME = $(TARGET)$(SUFFIX)k6
GUINAME = $(TARGET)gui$(SUFFIX)k6
else
ifdef I686
NAME = $(TARGET)$(SUFFIX)pp
GUINAME = $(TARGET)gui$(SUFFIX)pp
else
NAME = $(TARGET)$(SUFFIX)
GUINAME = $(TARGET)gui$(SUFFIX)
ARCH = -march=pentium
endif
endif
endif

# build the targets in different object dirs, since mess changes
# some structures and thus they can't be linked against each other.
OBJ = obj/$(NAME)

EMULATORDLL = $(NAME)lib.dll
EMULATORCLI = $(NAME)$(EXE)
EMULATORGUI = $(GUINAME)$(EXE)

#####################################################################
# compiler

#
# Preprocessor Definitions
#

DEFS = \
	-DWIN32 \
	-D_WINDOWS \
	-D__WIN32__ \
	-DNONAMELESSUNION \
	-DHAS_DUMMYUNIONNAME=1 \
	-DDIRECTSOUND_VERSION=0x0300 \
	-DDIRECTINPUT_VERSION=0x0500 \
	-DDIRECTDRAW_VERSION=0x0300 \
	-DINLINE='static __inline' \
	-Dinline=__inline \
	-D__inline__=__inline \
	-Dalloca=_alloca \
	-DPNG_SAVE_SUPPORT \
	-DMAME_AVI \
	-DHAS_CPUS \
	-DHAS_SOUND \
	-DLSB_FIRST=1 \
	-DXML_STATIC \
	$(MAME_VERSION) \
	-DCRLF=3 \

ifndef DEBUG
DEFS += -DNDEBUG
endif

ifdef NEW_DEBUGGER
DEFS += -DNEW_DEBUGGER
endif

ifdef MESS
DEFS += -DMESS=1 -DMAME32NAME='"MESS"' -DMAMENAME='"MESS"'
endif

INCLUDES = \
	-Isrc/cpu/m68000 \
	-I$(OBJ)/cpu/m68000

ifeq "$(TARGET)" "mess"
INCLUDES += \
	-Imess \
	-Imess/ui \
	-Imess/includes \
	-Imess/windows
endif

INCLUDES += \
	-Isrc \
	-Isrc/expat \
	-Isrc/zlib \
	-Isrc/includes \
	-Isrc/debug \
	-Isrc/windows \
	-Isrc/ui \

ifdef DX_INCPATH
INCLUDES += -I$(DX_INCPATH)
endif

#
# C Compiler flags
#

CFLAGS = -nologo -MT $(INCLUDES) -DDECL_SPEC=__cdecl \
	-Dsnprintf=_snprintf -Dvsnprintf=_vsnprintf

ifdef DEBUG
CFLAGS += -Zi -Od -GS
else
CFLAGS += -Ox -G5 -Ob2
endif

#####################################################################
# Resources

RCDEFS = $(MAME_NET) $(MAME_MMX) -DNDEBUG $(MAME_VERSION)

RCFLAGS = -l 0x409 -Isrc -Imess -I./ui $(MAME_DEBUG)

ifdef DEBUG
RCFLAGS += -DMAME_DEBUG
endif

ifdef MESS
RCFLAGS += -DMESS -Imess/ui -Isrc/ui
endif

#####################################################################
# Linker

LIBS = \
        kernel32.lib \
        user32.lib \
        gdi32.lib \
        shell32.lib \
        comctl32.lib \
        comdlg32.lib \
        advapi32.lib \
        winmm.lib \
        vfw32.lib \
        dxguid.lib \
        dinput.lib \
		dsound.lib \
		ddraw.lib \
		htmlhelp.lib \

ifdef DX_LIBPATH
LDFLAGS += -LIBPATH:$(subst \,\\,$(DX_LIBPATH))
endif

ifdef GX_PATH
LDFLAGS += -LIBPATH:$(subst \,\\,$(GX_PATH))\\$(WCEPLAT)
endif

ifdef BUILD_EXPAT
OBJDIRS += $(OBJ)/expat
EXPAT = $(OBJ)/libexpat.a
else
LIBS += expat.lib
EXPAT =
endif

ifdef BUILD_ZLIB
OBJDIRS += $(OBJ)/zlib
ZLIB = $(OBJ)/libz.a
else
LIBS += zlib.lib
ZLIB =
endif

LDFLAGS += -machine:x86 -nologo

ifdef DEBUG
LDFLAGS += -debug:full
else
LDFLAGS += -release -incremental:no -map
endif

ifdef BSCMAKE
BSCDEFS = -Fr$(@:%.o=%.sbr)
endif

#####################################################################

OBJDIRS = \
	obj				\
	$(OBJ)			\
	$(OBJ)/cpu		\
	$(OBJ)/debug	\
	$(OBJ)/sound	\
	$(OBJ)/drivers	\
	$(OBJ)/machine	\
	$(OBJ)/vidhrdw	\
	$(OBJ)/sndhrdw	\
	$(OBJ)/xml2info	\
	$(OBJ)/windows	\
	$(OBJ)/wince	\
	$(OBJ)/ui		\
	$(OBJ)/expat	\
	$(OBJ)/zlib

ifdef MESS
# MESS object directories
OBJDIRS += \
	$(OBJ)/mess \
	$(OBJ)/mess/cpu \
	$(OBJ)/mess/sound \
	$(OBJ)/mess/systems \
	$(OBJ)/mess/machine \
	$(OBJ)/mess/vidhrdw \
	$(OBJ)/mess/sndhrdw \
	$(OBJ)/mess/expat \
	$(OBJ)/mess/tools \
	$(OBJ)/mess/tools/dat2html \
	$(OBJ)/mess/tools/imgtool \
	$(OBJ)/mess/tools/imgtool/windows \
	$(OBJ)/mess/tools/imgtool/windows/res \
	$(OBJ)/mess/tools/mkhdimg \
	$(OBJ)/mess/tools/messroms \
	$(OBJ)/mess/tools/messdocs \
	$(OBJ)/mess/tools/messtest \
	$(OBJ)/mess/tools/mkimage \
	$(OBJ)/mess/formats \
	$(OBJ)/mess/devices \
	$(OBJ)/mess/windows \
	$(OBJ)/mess/ui
endif

PLATFORM_TOOL_OBJS =				\
	$(OBJ)/mess/windows/glob.o		\
	$(OBJ)/mess/windows/dirutils.o	\
	$(OBJ)/windows/fileio.o
	
#####################################################################

all:	maketree $(EMULATORCLI) $(EMULATORGUI) messtest$(EXE) messdocs$(EXE) chdman$(EXE) imgtool$(EXE) wimgtool$(EXE)

# include the various .mak files
include src/core.mak
ifdef MESS
include mess/$(TARGET).mak
include mess/tools/imgtool/windows/wimgtool.mak
else
include src/$(TARGET).mak
endif
include src/rules.mak
ifeq ($(MAMEOS),windows)
include mess/$(MAMEOS)/$(MAMEOS).mak
else
include src/$(MAMEOS)/$(MAMEOS).mak
endif
ifdef MESS
include mess/rules_ms.mak
endif

ifdef DEBUG
DBGDEFS = -DMAME_DEBUG
else
DBGDEFS =
DBGOBJS =
endif

DIRENTOBJS = $(OBJ)/mess/ui/dirent.o

# combine the various definitions to one
CDEFS = $(DEFS) $(COREDEFS) $(CPUDEFS) $(SOUNDDEFS) $(ASMDEFS) $(DBGDEFS) $(BSCDEFS)

$(EMULATORDLL): $(OBJS) $(COREOBJS) $(OSOBJS) $(DIRENTOBJS) $(DRVLIBS) $(OSDBGOBJS) $(RESFILE)
# always recompile the version string
	$(CC) $(CDEFS) $(CFLAGS) -Fr$(OBJ)/version.sbr -Fo$(OBJ)/version.o -c src/version.c
	@echo Linking $@...
	$(LD) -dll -base:0x10040000 $(LDFLAGS) -out:$@ $(LIBS) $(COREOBJS) $(OBJS) $(OSOBJS) $(DIRENTOBJS) $(DRVLIBS) $(OSDBGOBJS) $(RESFILE)
ifdef BSCMAKE
	$(BSCMAKE) -nologo -o$(@:%.exe=%.bsc) $(OBJS:%.o=%.sbr) $(COREOBJS:%.o=%.sbr)
endif
ifndef DEBUG
ifdef UPX
	$(UPX) $@
endif
endif

# gui target
$(EMULATORGUI):	$(EMULATORDLL) $(OBJ)/mess/ui/guimain.o $(GUIRESFILE)
	@echo Linking $@...
	$(LD) $(LDFLAGS) $(WINDOWS_PROGRAM) $(EMULATORDLL:%.dll=%.lib) $(OBJ)/mess/ui/guimain.o $(GUIRESFILE) -out:$@
ifndef DEBUG
ifdef UPX
	$(UPX) $@
endif
endif

# cli target
$(EMULATORCLI):	$(EMULATORDLL) $(OBJ)/mess/windows/climain.o
	@echo Linking $@...
	$(LD) $(LDFLAGS) $(CONSOLE_PROGRAM) $(EMULATORDLL:%.dll=%.lib) $(OBJ)/mess/windows/climain.o -out:$@
ifndef DEBUG
ifdef UPX
	$(UPX) $@
endif
endif

romcmp$(EXE): $(OBJ)/romcmp.o $(OBJ)/unzip.o
	@echo Linking $@..
	$(LD) $(LDFLAGS) $^ -out:$@

chdman$(EXE): $(OBJ)/chdman.o $(OBJ)/chd.o $(OBJ)/chdcd.o $(OBJ)/cdrom.o $(OBJ)/md5.o $(OBJ)/sha1.o $(OBJ)/version.o $(ZLIB) $(OSDBGOBJS)
	@echo Linking $@...
	$(LD) $(LDFLAGS) $^ $(ZLIB) -out:$@

xml2info$(EXE): src/xml2info/xml2info.c $(OBJ)/libexpat.a
	@echo Compiling $@...
	$(CC) -O1 -out:$@ $^

dat2html$(EXE): $(DAT2HTML_OBJS) $(PLATFORM_TOOL_OBJS) $(OBJ)/mess/ui/dirent.o
	@echo Compiling $@...
	$(LD) $(LDFLAGS) $^ -out:$@

messdocs$(EXE): $(MESSDOCS_OBJS) $(OBJ)/mess/windows/dirutils.o $(OBJ)/mess/ui/dirent.o $(OSDBGOBJS)
	@echo Compiling $@...
	$(LD) $(LDFLAGS) $^ -out:$@

imgtool$(EXE): $(IMGTOOL_OBJS) $(PLATFORM_TOOL_OBJS) $(OSDBGOBJS) $(OBJ)/mess/ui/dirent.o
	@echo Compiling $@...
	$(LD) $(LDFLAGS) $^ $(ZLIB) -out:$@

wimgtool$(EXE): \
		$(ZLIB)											\
		$(WIMGTOOL_OBJS)								\
		$(PLATFORM_TOOL_OBJS)							\
		$(OBJ)/mess/ui/dirent.o							\
		$(OSDBGOBJS)
	@echo Compiling $@...
	$(LD) $(LDFLAGS) $(LIBS) $(WINDOWS_PROGRAM) shlwapi.lib $^ $(ZLIB) -out:$@

messtest$(EXE):	$(OBJS) $(COREOBJS) $(DRVLIBS) $(MESSTEST_OBJS) \
		$(OBJ)/windows/asmtile.o				\
		$(OBJ)/windows/ticker.o					\
		$(OBJ)/windows/fileio.o					\
		$(OBJ)/windows/rc.o						\
		$(OBJ)/windows/misc.o					\
		$(OBJ)/windows/winalloc.o				\
		$(OBJ)/mess/windows/dirio.o				\
		$(OBJ)/mess/windows/dirutils.o			\
		$(OBJ)/mess/windows/glob.o				\
		$(OBJ)/mess/windows/parallel.o			\
		$(OBJ)/mess/windows/strconv.o			\
		$(OBJ)/mess/ui/dirent.o					
	@echo Linking $@...
	$(LD) $(LDFLAGS) $(CONSOLE_PROGRAM) $^ $(ZLIB) winmm.lib user32.lib -out:$@

# secondary libraries
$(OBJ)/libexpat.a: $(OBJ)/expat/xmlparse.o $(OBJ)/expat/xmlrole.o $(OBJ)/expat/xmltok.o
	$(AR) -nologo -out:$@ $^

$(OBJ)/libz.a: $(OBJ)/zlib/adler32.o $(OBJ)/zlib/compress.o $(OBJ)/zlib/crc32.o $(OBJ)/zlib/deflate.o \
				$(OBJ)/zlib/gzio.o $(OBJ)/zlib/inffast.o $(OBJ)/zlib/inflate.o \
				$(OBJ)/zlib/infback.o $(OBJ)/zlib/inftrees.o $(OBJ)/zlib/trees.o \
				$(OBJ)/zlib/uncompr.o $(OBJ)/zlib/zutil.o
	$(AR) -nologo -out:$@ $^

#############################################################################

ifndef DEBUG
# Workarounds for VC6 optimization bugs
$(OBJ)/input.o: src/input.c
	$(CC) $(CDEFS) $(FFLAGS) -W3 -nologo -MT $(INCLUDES) -Oi -Ot -Oy -Ob1 -Gs -G5 -Gr -Fo$@ -c $<

$(OBJ)/mess/cpu/g65816/g65816o0.o: mess/cpu/g65816/g65816o0.c
	$(CC) $(CDEFS) $(FFLAGS) -W3 -nologo -MT $(INCLUDES) -Oi -Ot -Oy -Gs -G5 -Gr -Fo$@ -c $<

$(OBJ)/mess/machine/msx.o: mess/machine/msx.c
	$(CC) $(CDEFS) $(FFLAGS) -W3 -nologo -MT $(INCLUDES) -Oi -Ot -Oy -Ob1 -Gs -G5 -Gr -Fo$@ -c $<

$(OBJ)/cpu/tms9900/%.o:	src/cpu/tms9900/%.c
	$(CC) $(CDEFS) $(FFLAGS) -W3 -nologo -MT $(INCLUDES) -Oi -Ot -Oy -Ob1 -Gs -G5 -Gr -Fo$@ -c $<
endif

$(OBJ)/mess/expat/%.o: mess/expat/%.c
	$(CC) $(CDEFS) $(CFLAGS) -Fo$@ -Imess/expat -DHAVE_MEMMOVE=1 -c $<

$(OBJ)/%.o: src/%.asm
	$(ASM) -o $@ $(ASMFLAGS) $(ASMDEFS) $<

$(OBJ)/%.o: src/windows/%.asm
	$(ASM) -o $@ $(ASMFLAGS) $(ASMDEFS) $<

$(OBJ)/%.o: src/%.c
	$(CC) $(CDEFS) $(CFLAGS) -Fo$@ -c $<

$(OBJ)/wince/%.o: src/wince/%.cpp
	$(CC) $(CDEFS) $(CFLAGS) -Fo$@ -c $<

$(OBJ)/mess/%.o: mess/%.c
	$(CC) $(CDEFS) $(CFLAGS) -Fo$@ -c $<

$(OBJ)/wince/%.res: src/wince/%.rc
	@echo Compiling resources $<...
	$(RC) $(RCDEFS) $(RCFLAGS) -Fo$@ $<

$(OBJ)/ui/%.res: src/ui/%.rc
	@echo Compiling resources $<...
	$(RC) $(RCDEFS) $(RCFLAGS) -Fo$@ $<

$(OBJ)/mess/windows/%.res: mess/windows/%.rc
	@echo Compiling resources $<...
	$(RC) $(RCDEFS) $(RCFLAGS) -Fo$@ $<

$(OBJ)/mess/ui/%.res: mess/ui/%.rc
	@echo Compiling resources $<...
	$(RC) $(RCDEFS) $(RCFLAGS) -Fo$@ $<

$(OBJ)/mess/%.res: mess/%.rc
	@echo Compiling resources $<...
	$(RC) $(RCDEFS) $(RCFLAGS) -Fo$@ $<

# compile generated C files for the 68000 emulator
$(M68000_GENERATED_OBJS): $(OBJ)/cpu/m68000/m68kmake$(EXE)
	@echo Compiling $(subst .o,.c,$@)...
	$(CC) $(CDEFS) $(CFLAGS) -Fo$@ -c $*.c

# additional rule, because m68kcpu.c includes the generated m68kops.h :-/
$(OBJ)/cpu/m68000/m68kcpu.o: $(OBJ)/cpu/m68000/m68kmake$(EXE)

# generate C source files for the 68000 emulator
$(OBJ)/cpu/m68000/m68kmake$(EXE): $(OBJ)/cpu/m68000/m68kmake.o $(OSDBGOBJS)
	@echo M68K make $<...
	$(LD) $(LDFLAGS) $(CONSOLE_PROGRAM) $^ -out:$@
	@echo Generating M68K source files...
	$(OBJ)/cpu/m68000/m68kmake$(EXE) $(OBJ)/cpu/m68000 src/cpu/m68000/m68k_in.c

# generate asm source files for the 68000/68020 emulators
$(OBJ)/cpu/m68000/68000.asm:  src/cpu/m68000/make68k.c
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGS) -Fe$(OBJ)/cpu/m68000/make68k$(EXE) -Fo$(OBJ)/cpu/m68000/ $<
	@echo Generating $@...
	$(OBJ)/cpu/m68000/make68k$(EXE) $@ $(OBJ)/cpu/m68000/68000tab.asm 00

$(OBJ)/cpu/m68000/68020.asm:  src/cpu/m68000/make68k.c
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGS) -Fe$(OBJ)/cpu/m68000/make68k$(EXE) -Fo$(OBJ)/cpu/m68000/ $<
	@echo Generating $@...
	$(OBJ)/cpu/m68000/make68k$(EXE) $@ $(OBJ)/cpu/m68000/68020tab.asm 20

# generated asm files for the 68000 emulator
$(OBJ)/cpu/m68000/68000.o:  $(OBJ)/cpu/m68000/68000.asm
	@echo Assembling $<...
	$(ASM) -o $@ $(ASMFLAGS) $(subst -D,-d,$(ASMDEFS)) $<

$(OBJ)/cpu/m68000/68020.o:  $(OBJ)/cpu/m68000/68020.asm
	@echo Assembling $<...
	$(ASM) -o $@ $(ASMFLAGS) $(subst -D,-d,$(ASMDEFS)) $<

$(OBJ)/%.a:
	@echo Archiving $@...
	$(AR) -nologo -out:$@ $^

makedir:
	@echo make makedir is no longer necessary, just type make

$(sort $(OBJDIRS)):
	$(MD) $(subst /,\\,$@)

maketree: $(sort $(OBJDIRS))

clean:
	@echo Deleting object tree $(OBJ)...
	@-$(RM) -r $(OBJ)
	@echo Deleting $(EMULATOR)...
	@-$(RM) $(EMULATOR)

