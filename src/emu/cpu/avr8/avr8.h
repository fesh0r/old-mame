/*
    Atmel 8-bit AVR simulator

    (Skeleton)

    Written by MooglyGuy
*/

#pragma once

#ifndef __AVR8_H__
#define __AVR8_H__

// Used by core CPU interface
struct avr8_state
{
    UINT32 pc;

    legacy_cpu_device *device;
    address_space *program;
    address_space *io;

    int icount;
	UINT32 addr_mask;

	UINT8 r[256];
	UINT8 status;

    UINT8 timer0_top;
	INT32 timer0_increment;
	UINT16 timer0_prescale;
	UINT16 timer0_prescale_count;

    UINT16 timer1_top;
	INT32 timer1_increment;
	UINT16 timer1_prescale;
	UINT16 timer1_prescale_count;

    UINT8 timer2_top;
	INT32 timer2_increment;
	UINT16 timer2_prescale;
	UINT16 timer2_prescale_count;

	UINT64 elapsed_cycles;

	bool interrupt_pending;
};

enum
{
    AVR8_SREG = 1,
    AVR8_PC,
    AVR8_R0,
    AVR8_R1,
    AVR8_R2,
    AVR8_R3,
    AVR8_R4,
    AVR8_R5,
    AVR8_R6,
    AVR8_R7,
    AVR8_R8,
    AVR8_R9,
    AVR8_R10,
    AVR8_R11,
    AVR8_R12,
    AVR8_R13,
    AVR8_R14,
    AVR8_R15,
    AVR8_R16,
    AVR8_R17,
    AVR8_R18,
    AVR8_R19,
    AVR8_R20,
    AVR8_R21,
    AVR8_R22,
    AVR8_R23,
    AVR8_R24,
    AVR8_R25,
    AVR8_R26,
    AVR8_R27,
    AVR8_R28,
    AVR8_R29,
    AVR8_R30,
    AVR8_R31,
    AVR8_X,
    AVR8_Y,
    AVR8_Z,
    AVR8_SP,
};

enum
{
    AVR8_INT_RESET = 0,
    AVR8_INT_INT0,
    AVR8_INT_INT1,
    AVR8_INT_PCINT0,
    AVR8_INT_PCINT1,
    AVR8_INT_PCINT2,
    AVR8_INT_WDT,
    AVR8_INT_T2COMPA,
    AVR8_INT_T2COMPB,
    AVR8_INT_T2OVF,
    AVR8_INT_T1CAPT,
    AVR8_INT_T1COMPA,
    AVR8_INT_T1COMPB,
    AVR8_INT_T1OVF,
    AVR8_INT_T0COMPA,
    AVR8_INT_T0COMPB,
    AVR8_INT_T0OVF,
    AVR8_INT_SPI_STC,
    AVR8_INT_USART_RX,
    AVR8_INT_USART_UDRE,
    AVR8_INT_USART_TX,
    AVR8_INT_ADC,
    AVR8_INT_EE_RDY,
    AVR8_INT_ANALOG_COMP,
    AVR8_INT_TWI,
    AVR8_INT_SPM_RDY,
};

// Used by I/O register handling
enum
{
	AVR8_REGIDX_R0 = 0,
	AVR8_REGIDX_R1,
	AVR8_REGIDX_R2,
	AVR8_REGIDX_R3,
	AVR8_REGIDX_R4,
	AVR8_REGIDX_R5,
	AVR8_REGIDX_R6,
	AVR8_REGIDX_R7,
	AVR8_REGIDX_R8,
	AVR8_REGIDX_R9,
	AVR8_REGIDX_R10,
	AVR8_REGIDX_R11,
	AVR8_REGIDX_R12,
	AVR8_REGIDX_R13,
	AVR8_REGIDX_R14,
	AVR8_REGIDX_R15,
	AVR8_REGIDX_R16,
	AVR8_REGIDX_R17,
	AVR8_REGIDX_R18,
	AVR8_REGIDX_R19,
	AVR8_REGIDX_R20,
	AVR8_REGIDX_R21,
	AVR8_REGIDX_R22,
	AVR8_REGIDX_R23,
	AVR8_REGIDX_R24,
	AVR8_REGIDX_R25,
	AVR8_REGIDX_R26,
	AVR8_REGIDX_R27,
	AVR8_REGIDX_R28,
	AVR8_REGIDX_R29,
	AVR8_REGIDX_R30,
	AVR8_REGIDX_R31,

	AVR8_REGIDX_PINB = 0x23,
	AVR8_REGIDX_DDRB,
	AVR8_REGIDX_PORTB,
	AVR8_REGIDX_PINC,
	AVR8_REGIDX_DDRC,
	AVR8_REGIDX_PORTC,
	AVR8_REGIDX_PIND,
	AVR8_REGIDX_DDRD,
	AVR8_REGIDX_PORTD,

	AVR8_REGIDX_TIFR0 = 0x35,
	AVR8_REGIDX_TIFR1,
	AVR8_REGIDX_TIFR2,

	AVR8_REGIDX_PCIFR = 0x3b,
	AVR8_REGIDX_EIFR,
	AVR8_REGIDX_EIMSK,
	AVR8_REGIDX_GPIOR0,
	AVR8_REGIDX_EECR,
	AVR8_REGIDX_EEDR,
	AVR8_REGIDX_EEARL,
	AVR8_REGIDX_EEARH,
	AVR8_REGIDX_GTCCR,
	AVR8_REGIDX_TCCR0A,
	AVR8_REGIDX_TCCR0B,
	AVR8_REGIDX_TCNT0,
	AVR8_REGIDX_OCR0A,
	AVR8_REGIDX_OCR0B,

	AVR8_REGIDX_GPIOR1 = 0x4a,
	AVR8_REGIDX_GPIOR2,
	AVR8_REGIDX_SPCR,
	AVR8_REGIDX_SPSR,
	AVR8_REGIDX_SPDR,

	AVR8_REGIDX_ACSR = 0x50,

	AVR8_REGIDX_SMCR = 0x53,
	AVR8_REGIDX_MCUSR,
	AVR8_REGIDX_MCUCR,

	AVR8_REGIDX_SPMCSR = 0x57,

	AVR8_REGIDX_SPL = 0x5d,
	AVR8_REGIDX_SPH,
	AVR8_REGIDX_SREG,
	AVR8_REGIDX_WDTCSR,
	AVR8_REGIDX_CLKPR,

	AVR8_REGIDX_PRR = 0x64,

	AVR8_REGIDX_OSCCAL = 0x66,

	AVR8_REGIDX_PCICR = 0x68,
	AVR8_REGIDX_EICRA,

	AVR8_REGIDX_PCMSK0 = 0x6B,
	AVR8_REGIDX_PCMSK1,
	AVR8_REGIDX_PCMSK2,
	AVR8_REGIDX_TIMSK0,
	AVR8_REGIDX_TIMSK1,
	AVR8_REGIDX_TIMSK2,

	AVR8_REGIDX_ADCL = 0x78,
	AVR8_REGIDX_ADCH,
	AVR8_REGIDX_ADCSRA,
	AVR8_REGIDX_ADCSRB,
	AVR8_REGIDX_ADMUX,

	AVR8_REGIDX_DIDR0 = 0x7e,
	AVR8_REGIDX_DIDR1,
	AVR8_REGIDX_TCCR1A,
	AVR8_REGIDX_TCCR1B,
	AVR8_REGIDX_TCCR1C,

	AVR8_REGIDX_TCNT1L = 0x84,
	AVR8_REGIDX_TCNT1H,
	AVR8_REGIDX_ICR1L,
	AVR8_REGIDX_ICR1H,
	AVR8_REGIDX_OCR1AL,
	AVR8_REGIDX_OCR1AH,
	AVR8_REGIDX_OCR1BL,
	AVR8_REGIDX_OCR1BH,

	AVR8_REGIDX_TCCR2A = 0xb0,
	AVR8_REGIDX_TCCR2B,
	AVR8_REGIDX_TCNT2,
	AVR8_REGIDX_OCR2A,
	AVR8_REGIDX_OCR2B,

	AVR8_REGIDX_ASSR = 0xb6,

	AVR8_REGIDX_TWBR = 0xb8,
	AVR8_REGIDX_TWSR,
	AVR8_REGIDX_TWAR,
	AVR8_REGIDX_TWDR,
	AVR8_REGIDX_TWCR,
	AVR8_REGIDX_TWAMR,

	AVR8_REGIDX_UCSR0A = 0xc0,
	AVR8_REGIDX_UCSR0B,
	AVR8_REGIDX_UCSR0C,

	AVR8_REGIDX_UBRR0L = 0xc4,
	AVR8_REGIDX_UBRR0H,
	AVR8_REGIDX_UDR0
};

enum
{
	AVR8_REG_A = 0,
	AVR8_REG_B,
	AVR8_REG_C,
	AVR8_REG_D,
};

enum
{
	AVR8_INTIDX_SPI,
	AVR8_INTIDX_ICF1,
	AVR8_INTIDX_OCF1B,
	AVR8_INTIDX_OCF1A,
	AVR8_INTIDX_TOV1,
	AVR8_INTIDX_OCF2B,
	AVR8_INTIDX_OCF2A,
	AVR8_INTIDX_TOV2,

	AVR8_INTIDX_COUNT,
};

#define AVR8_EECR_EERE			0x01
#define AVR8_EEARH_MASK			0x01

#define AVR8_SPSR_SPIF_MASK		0x80
#define AVR8_SPSR_SPIF_SHIFT	7
#define AVR8_SPSR_SPR2X_MASK	0x01

#define AVR8_SPCR_SPIE_MASK		0x80
#define AVR8_SPCR_SPE_MASK		0x40
#define AVR8_SPCR_DORD_MASK		0x20
#define AVR8_SPCR_MSTR_MASK		0x10
#define AVR8_SPCR_CPOL_MASK		0x08
#define AVR8_SPCR_CPHA_MASK		0x04
#define AVR8_SPCR_SPR_MASK		0x03

DECLARE_LEGACY_CPU_DEVICE(ATMEGA88, atmega88);
DECLARE_LEGACY_CPU_DEVICE(ATMEGA644, atmega644);

void avr8_update_interrupt(device_t *device, int source);
UINT64 avr8_get_elapsed_cycles(device_t *device);

CPU_DISASSEMBLE( avr8 );

#endif /* __AVR8_H__ */
